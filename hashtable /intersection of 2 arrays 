/*most effective aproach is make unordered set to store elements of both the arrays
 This allows for efficient lookups and ensures uniqueness.
Iterate through one set and check if the elements are present in the other set. Collect the common elements.


vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> set1(nums1.begin(), nums1.end()) ;
        unordered_set<int> set2(nums2.begin(), nums2.end()) ;

        vector<int> result;

        for(const int &i : set1){
            if(set2.find(i)!= set2.end()){
                result.push_back(i);
            }
        }
        return result;
    }


    ///  most efficient rather than using extra space of vector 

The loop iterates over each element num in nums2.
s.count(num) checks if num is present in the set s (i.e., if num is in nums1).
s.count(num) returns 1 if num is found, otherwise 0.
If num is present in s, it is added to the answer set using answer.insert(num).
The answer set collects all the unique common elements.


class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> s(nums1.begin(),nums1.end());
        unordered_set<int> answer;
        for(int num : nums2){
            if(s.count(num)){
                answer.insert(num);
            }
        }
        return vector<int>(answer.begin(),answer.end());
    }
};










*/
